{"mappings":"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","sources":["dist/index.js"],"sourcesContent":["\"use strict\";\nclass Game {\n    constructor(canvasId) {\n        this.canvas = document.getElementById(canvasId);\n        this.context = this.canvas.getContext('2d');\n        this._pacman = new Pacman(this.canvas.width / 2, this.canvas.height / 2);\n        this.ghosts = [new Ghost(50, 50), new Ghost(50, 100)]; // Example positions\n        this.walls = this.createWalls();\n        this.dots = this.createDots();\n        this.gameLoop = 0;\n        this.dotsEaten = 0; // Initialize counter\n    }\n    createWalls() {\n        // Define walls' positions and dimensions\n        const borderThickness = 20;\n        return [\n            new Wall(0, 0, this.canvas.width, borderThickness),\n            new Wall(0, this.canvas.height - borderThickness, this.canvas.width, borderThickness),\n            new Wall(0, 0, borderThickness, this.canvas.height),\n            new Wall(this.canvas.width - borderThickness, 0, borderThickness, this.canvas.height),\n            new Wall(100, 100, 200, 20),\n            new Wall(300, 200, 20, 200),\n            // Add more walls as needed\n        ];\n    }\n    createDots() {\n        // Create dots for the game board\n        let dots = [];\n        for (let i = 0; i < this.canvas.width; i += 20) {\n            for (let j = 0; j < this.canvas.height; j += 20) {\n                const dot = new Dot(i, j);\n                if (!this.walls.some(wall => wall.collidesWith(dot))) {\n                    dots.push(dot);\n                }\n            }\n        }\n        return dots;\n    }\n    start() {\n        this.gameLoop = setInterval(() => {\n            this.update();\n            this.draw();\n        }, 1000 / 60);\n    }\n    update() {\n        this._pacman.update(this.walls);\n        this.ghosts.forEach(ghost => ghost.update(this.walls));\n        // Check for collisions between Pacman and dots\n        this.dots = this.dots.filter(dot => {\n            if (this._pacman.collidesWith(dot)) {\n                this.dotsEaten++; // Increment counter\n                return false;\n            }\n            return true;\n        });\n        // Handle other game logic here\n    }\n    draw() {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this._pacman.draw(this.context);\n        this.ghosts.forEach(ghost => ghost.draw(this.context));\n        this.dots.forEach(dot => dot.draw(this.context));\n        this.walls.forEach(wall => wall.draw(this.context));\n        // Draw the dots eaten counter\n        this.context.fillStyle = 'white';\n        this.context.font = '20px Arial';\n        this.context.fillText(`Dots Eaten: ${this.dotsEaten}`, this.canvas.width - 150, 30);\n    }\n    get pacman() {\n        return this._pacman;\n    }\n}\nclass Pacman {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.radius = 10;\n        this.speed = 2;\n        this.direction = 'right';\n    }\n    update(walls) {\n        let nextX = this.x;\n        let nextY = this.y;\n        switch (this.direction) {\n            case 'right':\n                nextX += this.speed;\n                break;\n            case 'left':\n                nextX -= this.speed;\n                break;\n            case 'up':\n                nextY -= this.speed;\n                break;\n            case 'down':\n                nextY += this.speed;\n                break;\n        }\n        if (!walls.some(wall => wall.collidesWithCircle(nextX, nextY, this.radius))) {\n            this.x = nextX;\n            this.y = nextY;\n        }\n    }\n    draw(context) {\n        context.beginPath();\n        context.arc(this.x, this.y, this.radius, 0.2 * Math.PI, 1.8 * Math.PI);\n        context.lineTo(this.x, this.y);\n        context.fillStyle = 'yellow';\n        context.fill();\n        context.closePath();\n    }\n    setDirection(direction) {\n        this.direction = direction;\n    }\n    collidesWith(dot) {\n        const distance = Math.sqrt(Math.pow((this.x - dot.x), 2) + Math.pow((this.y - dot.y), 2));\n        return distance < this.radius + dot.radius;\n    }\n}\nclass Ghost {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.radius = 10;\n        this.speed = 2;\n        this.direction = this.getRandomDirection();\n        this.changeDirectionInterval = 0;\n    }\n    getRandomDirection() {\n        const directions = ['right', 'left', 'up', 'down'];\n        return directions[Math.floor(Math.random() * directions.length)];\n    }\n    update(walls) {\n        let nextX = this.x;\n        let nextY = this.y;\n        switch (this.direction) {\n            case 'right':\n                nextX += this.speed;\n                break;\n            case 'left':\n                nextX -= this.speed;\n                break;\n            case 'up':\n                nextY -= this.speed;\n                break;\n            case 'down':\n                nextY += this.speed;\n                break;\n        }\n        if (!walls.some(wall => wall.collidesWithCircle(nextX, nextY, this.radius))) {\n            this.x = nextX;\n            this.y = nextY;\n        }\n        else {\n            this.direction = this.getRandomDirection(); // Change direction if hitting a wall\n        }\n        this.changeDirectionInterval++;\n        if (this.changeDirectionInterval > 60) { // Change direction every 1 second (assuming 60 FPS)\n            this.direction = this.getRandomDirection();\n            this.changeDirectionInterval = 0;\n        }\n    }\n    draw(context) {\n        context.beginPath();\n        context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n        context.fillStyle = 'red';\n        context.fill();\n        context.closePath();\n    }\n}\nclass Dot {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.radius = 3;\n    }\n    draw(context) {\n        context.beginPath();\n        context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n        context.fillStyle = 'white';\n        context.fill();\n        context.closePath();\n    }\n}\nclass Wall {\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    draw(context) {\n        context.fillStyle = 'blue';\n        context.fillRect(this.x, this.y, this.width, this.height);\n    }\n    collidesWith(dot) {\n        return (dot.x > this.x &&\n            dot.x < this.x + this.width &&\n            dot.y > this.y &&\n            dot.y < this.y + this.height);\n    }\n    collidesWithCircle(cx, cy, radius) {\n        const closestX = Math.max(this.x, Math.min(cx, this.x + this.width));\n        const closestY = Math.max(this.y, Math.min(cy, this.y + this.height));\n        const distanceX = cx - closestX;\n        const distanceY = cy - closestY;\n        return (Math.pow(distanceX, 2) + Math.pow(distanceY, 2)) < (Math.pow(radius, 2));\n    }\n}\nwindow.onload = () => {\n    const game = new Game('gameCanvas');\n    game.start();\n    document.addEventListener('keydown', (event) => {\n        switch (event.key) {\n            case 'ArrowRight':\n                game.pacman.setDirection('right');\n                break;\n            case 'ArrowLeft':\n                game.pacman.setDirection('left');\n                break;\n            case 'ArrowUp':\n                game.pacman.setDirection('up');\n                break;\n            case 'ArrowDown':\n                game.pacman.setDirection('down');\n                break;\n        }\n    });\n};\n"],"names":[],"version":3,"file":"index.f925a820.js.map","sourceRoot":"../"}